/* This file was generated by SableCC (http://www.sablecc.org/). */

package srt.analysis;

import java.util.*;
import srt.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPFilesub().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAFilesub(AFilesub node)
    {
        defaultIn(node);
    }

    public void outAFilesub(AFilesub node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFilesub(AFilesub node)
    {
        inAFilesub(node);
        if(node.getItemlist() != null)
        {
            node.getItemlist().apply(this);
        }
        outAFilesub(node);
    }

    public void inAItemItemlist(AItemItemlist node)
    {
        defaultIn(node);
    }

    public void outAItemItemlist(AItemItemlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAItemItemlist(AItemItemlist node)
    {
        inAItemItemlist(node);
        if(node.getItem() != null)
        {
            node.getItem().apply(this);
        }
        outAItemItemlist(node);
    }

    public void inAItemlistItemlist(AItemlistItemlist node)
    {
        defaultIn(node);
    }

    public void outAItemlistItemlist(AItemlistItemlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAItemlistItemlist(AItemlistItemlist node)
    {
        inAItemlistItemlist(node);
        if(node.getItemlist() != null)
        {
            node.getItemlist().apply(this);
        }
        if(node.getItem() != null)
        {
            node.getItem().apply(this);
        }
        outAItemlistItemlist(node);
    }

    public void inAItem(AItem node)
    {
        defaultIn(node);
    }

    public void outAItem(AItem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAItem(AItem node)
    {
        inAItem(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        if(node.getTime() != null)
        {
            node.getTime().apply(this);
        }
        if(node.getSubs() != null)
        {
            node.getSubs().apply(this);
        }
        outAItem(node);
    }

    public void inATime(ATime node)
    {
        defaultIn(node);
    }

    public void outATime(ATime node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATime(ATime node)
    {
        inATime(node);
        if(node.getH1() != null)
        {
            node.getH1().apply(this);
        }
        if(node.getT1() != null)
        {
            node.getT1().apply(this);
        }
        if(node.getM1() != null)
        {
            node.getM1().apply(this);
        }
        if(node.getT2() != null)
        {
            node.getT2().apply(this);
        }
        if(node.getS1() != null)
        {
            node.getS1().apply(this);
        }
        if(node.getC1() != null)
        {
            node.getC1().apply(this);
        }
        if(node.getX1() != null)
        {
            node.getX1().apply(this);
        }
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getH2() != null)
        {
            node.getH2().apply(this);
        }
        if(node.getT3() != null)
        {
            node.getT3().apply(this);
        }
        if(node.getM2() != null)
        {
            node.getM2().apply(this);
        }
        if(node.getT4() != null)
        {
            node.getT4().apply(this);
        }
        if(node.getS2() != null)
        {
            node.getS2().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getX2() != null)
        {
            node.getX2().apply(this);
        }
        outATime(node);
    }

    public void inATextlistSubs(ATextlistSubs node)
    {
        defaultIn(node);
    }

    public void outATextlistSubs(ATextlistSubs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextlistSubs(ATextlistSubs node)
    {
        inATextlistSubs(node);
        if(node.getTextlist() != null)
        {
            node.getTextlist().apply(this);
        }
        outATextlistSubs(node);
    }

    public void inAEffectSubs(AEffectSubs node)
    {
        defaultIn(node);
    }

    public void outAEffectSubs(AEffectSubs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEffectSubs(AEffectSubs node)
    {
        inAEffectSubs(node);
        if(node.getE1() != null)
        {
            node.getE1().apply(this);
        }
        if(node.getTextlist() != null)
        {
            node.getTextlist().apply(this);
        }
        if(node.getE2() != null)
        {
            node.getE2().apply(this);
        }
        outAEffectSubs(node);
    }

    public void inATextTextlist(ATextTextlist node)
    {
        defaultIn(node);
    }

    public void outATextTextlist(ATextTextlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextTextlist(ATextTextlist node)
    {
        inATextTextlist(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        outATextTextlist(node);
    }

    public void inATextlistTextlist(ATextlistTextlist node)
    {
        defaultIn(node);
    }

    public void outATextlistTextlist(ATextlistTextlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextlistTextlist(ATextlistTextlist node)
    {
        inATextlistTextlist(node);
        if(node.getTextlist() != null)
        {
            node.getTextlist().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        outATextlistTextlist(node);
    }

    public void inATextEffect(ATextEffect node)
    {
        defaultIn(node);
    }

    public void outATextEffect(ATextEffect node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextEffect(ATextEffect node)
    {
        inATextEffect(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outATextEffect(node);
    }

    public void inASlashEffect(ASlashEffect node)
    {
        defaultIn(node);
    }

    public void outASlashEffect(ASlashEffect node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASlashEffect(ASlashEffect node)
    {
        inASlashEffect(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outASlashEffect(node);
    }

    public void inAHours(AHours node)
    {
        defaultIn(node);
    }

    public void outAHours(AHours node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHours(AHours node)
    {
        inAHours(node);
        if(node.getD1() != null)
        {
            node.getD1().apply(this);
        }
        if(node.getD2() != null)
        {
            node.getD2().apply(this);
        }
        outAHours(node);
    }

    public void inAMinutes(AMinutes node)
    {
        defaultIn(node);
    }

    public void outAMinutes(AMinutes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinutes(AMinutes node)
    {
        inAMinutes(node);
        if(node.getD3() != null)
        {
            node.getD3().apply(this);
        }
        if(node.getD4() != null)
        {
            node.getD4().apply(this);
        }
        outAMinutes(node);
    }

    public void inASeconds(ASeconds node)
    {
        defaultIn(node);
    }

    public void outASeconds(ASeconds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeconds(ASeconds node)
    {
        inASeconds(node);
        if(node.getD5() != null)
        {
            node.getD5().apply(this);
        }
        if(node.getD6() != null)
        {
            node.getD6().apply(this);
        }
        outASeconds(node);
    }

    public void inAMillisecons(AMillisecons node)
    {
        defaultIn(node);
    }

    public void outAMillisecons(AMillisecons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMillisecons(AMillisecons node)
    {
        inAMillisecons(node);
        if(node.getD7() != null)
        {
            node.getD7().apply(this);
        }
        if(node.getD8() != null)
        {
            node.getD8().apply(this);
        }
        outAMillisecons(node);
    }
}
