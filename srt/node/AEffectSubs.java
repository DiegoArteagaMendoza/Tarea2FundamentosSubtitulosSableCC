/* This file was generated by SableCC (http://www.sablecc.org/). */

package srt.node;

import srt.analysis.*;

@SuppressWarnings("nls")
public final class AEffectSubs extends PSubs
{
    private PEffect _e1_;
    private PTextlist _textlist_;
    private PEffect _e2_;

    public AEffectSubs()
    {
        // Constructor
    }

    public AEffectSubs(
        @SuppressWarnings("hiding") PEffect _e1_,
        @SuppressWarnings("hiding") PTextlist _textlist_,
        @SuppressWarnings("hiding") PEffect _e2_)
    {
        // Constructor
        setE1(_e1_);

        setTextlist(_textlist_);

        setE2(_e2_);

    }

    @Override
    public Object clone()
    {
        return new AEffectSubs(
            cloneNode(this._e1_),
            cloneNode(this._textlist_),
            cloneNode(this._e2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEffectSubs(this);
    }

    public PEffect getE1()
    {
        return this._e1_;
    }

    public void setE1(PEffect node)
    {
        if(this._e1_ != null)
        {
            this._e1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e1_ = node;
    }

    public PTextlist getTextlist()
    {
        return this._textlist_;
    }

    public void setTextlist(PTextlist node)
    {
        if(this._textlist_ != null)
        {
            this._textlist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._textlist_ = node;
    }

    public PEffect getE2()
    {
        return this._e2_;
    }

    public void setE2(PEffect node)
    {
        if(this._e2_ != null)
        {
            this._e2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._e1_)
            + toString(this._textlist_)
            + toString(this._e2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._e1_ == child)
        {
            this._e1_ = null;
            return;
        }

        if(this._textlist_ == child)
        {
            this._textlist_ = null;
            return;
        }

        if(this._e2_ == child)
        {
            this._e2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._e1_ == oldChild)
        {
            setE1((PEffect) newChild);
            return;
        }

        if(this._textlist_ == oldChild)
        {
            setTextlist((PTextlist) newChild);
            return;
        }

        if(this._e2_ == oldChild)
        {
            setE2((PEffect) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
