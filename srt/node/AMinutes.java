/* This file was generated by SableCC (http://www.sablecc.org/). */

package srt.node;

import srt.analysis.*;

@SuppressWarnings("nls")
public final class AMinutes extends PMinutes
{
    private TDigit _d3_;
    private TDigit _d4_;

    public AMinutes()
    {
        // Constructor
    }

    public AMinutes(
        @SuppressWarnings("hiding") TDigit _d3_,
        @SuppressWarnings("hiding") TDigit _d4_)
    {
        // Constructor
        setD3(_d3_);

        setD4(_d4_);

    }

    @Override
    public Object clone()
    {
        return new AMinutes(
            cloneNode(this._d3_),
            cloneNode(this._d4_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMinutes(this);
    }

    public TDigit getD3()
    {
        return this._d3_;
    }

    public void setD3(TDigit node)
    {
        if(this._d3_ != null)
        {
            this._d3_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._d3_ = node;
    }

    public TDigit getD4()
    {
        return this._d4_;
    }

    public void setD4(TDigit node)
    {
        if(this._d4_ != null)
        {
            this._d4_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._d4_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._d3_)
            + toString(this._d4_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._d3_ == child)
        {
            this._d3_ = null;
            return;
        }

        if(this._d4_ == child)
        {
            this._d4_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._d3_ == oldChild)
        {
            setD3((TDigit) newChild);
            return;
        }

        if(this._d4_ == oldChild)
        {
            setD4((TDigit) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
