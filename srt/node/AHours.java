/* This file was generated by SableCC (http://www.sablecc.org/). */

package srt.node;

import srt.analysis.*;

@SuppressWarnings("nls")
public final class AHours extends PHours
{
    private TDigit _d1_;
    private TDigit _d2_;

    public AHours()
    {
        // Constructor
    }

    public AHours(
        @SuppressWarnings("hiding") TDigit _d1_,
        @SuppressWarnings("hiding") TDigit _d2_)
    {
        // Constructor
        setD1(_d1_);

        setD2(_d2_);

    }

    @Override
    public Object clone()
    {
        return new AHours(
            cloneNode(this._d1_),
            cloneNode(this._d2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAHours(this);
    }

    public TDigit getD1()
    {
        return this._d1_;
    }

    public void setD1(TDigit node)
    {
        if(this._d1_ != null)
        {
            this._d1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._d1_ = node;
    }

    public TDigit getD2()
    {
        return this._d2_;
    }

    public void setD2(TDigit node)
    {
        if(this._d2_ != null)
        {
            this._d2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._d2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._d1_)
            + toString(this._d2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._d1_ == child)
        {
            this._d1_ = null;
            return;
        }

        if(this._d2_ == child)
        {
            this._d2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._d1_ == oldChild)
        {
            setD1((TDigit) newChild);
            return;
        }

        if(this._d2_ == oldChild)
        {
            setD2((TDigit) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
