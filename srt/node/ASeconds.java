/* This file was generated by SableCC (http://www.sablecc.org/). */

package srt.node;

import srt.analysis.*;

@SuppressWarnings("nls")
public final class ASeconds extends PSeconds
{
    private TDigit _d5_;
    private TDigit _d6_;

    public ASeconds()
    {
        // Constructor
    }

    public ASeconds(
        @SuppressWarnings("hiding") TDigit _d5_,
        @SuppressWarnings("hiding") TDigit _d6_)
    {
        // Constructor
        setD5(_d5_);

        setD6(_d6_);

    }

    @Override
    public Object clone()
    {
        return new ASeconds(
            cloneNode(this._d5_),
            cloneNode(this._d6_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASeconds(this);
    }

    public TDigit getD5()
    {
        return this._d5_;
    }

    public void setD5(TDigit node)
    {
        if(this._d5_ != null)
        {
            this._d5_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._d5_ = node;
    }

    public TDigit getD6()
    {
        return this._d6_;
    }

    public void setD6(TDigit node)
    {
        if(this._d6_ != null)
        {
            this._d6_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._d6_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._d5_)
            + toString(this._d6_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._d5_ == child)
        {
            this._d5_ = null;
            return;
        }

        if(this._d6_ == child)
        {
            this._d6_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._d5_ == oldChild)
        {
            setD5((TDigit) newChild);
            return;
        }

        if(this._d6_ == oldChild)
        {
            setD6((TDigit) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
