/* This file was generated by SableCC (http://www.sablecc.org/). */

package subtitulo.parser;

import subtitulo.lexer.*;
import subtitulo.node.*;
import subtitulo.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PFilesub node1 = (PFilesub) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AFilesub */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AItemItemlist */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AItemlistItemlist */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AItem */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ATime */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce ATstart */
            {
                ArrayList<Object> list = new5();
                push(goTo(4), list, false);
            }
            break;
            case 6: /* reduce ATend */
            {
                ArrayList<Object> list = new6();
                push(goTo(5), list, false);
            }
            break;
            case 7: /* reduce ATextSubs */
            {
                ArrayList<Object> list = new7();
                push(goTo(6), list, false);
            }
            break;
            case 8: /* reduce ASubsSubs */
            {
                ArrayList<Object> list = new8();
                push(goTo(6), list, false);
            }
            break;
            case 9: /* reduce AFontWriting */
            {
                ArrayList<Object> list = new9();
                push(goTo(7), list, false);
            }
            break;
            case 10: /* reduce ATextWriting */
            {
                ArrayList<Object> list = new10();
                push(goTo(7), list, false);
            }
            break;
            case 11: /* reduce AColorWriting */
            {
                ArrayList<Object> list = new11();
                push(goTo(7), list, false);
            }
            break;
            case 12: /* reduce AHours */
            {
                ArrayList<Object> list = new12();
                push(goTo(8), list, false);
            }
            break;
            case 13: /* reduce AMinutes */
            {
                ArrayList<Object> list = new13();
                push(goTo(9), list, false);
            }
            break;
            case 14: /* reduce ASeconds */
            {
                ArrayList<Object> list = new14();
                push(goTo(10), list, false);
            }
            break;
            case 15: /* reduce AMillisecons */
            {
                ArrayList<Object> list = new15();
                push(goTo(11), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AFilesub */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFilesub pfilesubNode1;
        {
            // Block
        PItemlist pitemlistNode2;
        pitemlistNode2 = (PItemlist)nodeArrayList1.get(0);

        pfilesubNode1 = new AFilesub(pitemlistNode2);
        }
	nodeList.add(pfilesubNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AItemItemlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PItemlist pitemlistNode1;
        {
            // Block
        PItem pitemNode2;
        pitemNode2 = (PItem)nodeArrayList1.get(0);

        pitemlistNode1 = new AItemItemlist(pitemNode2);
        }
	nodeList.add(pitemlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AItemlistItemlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PItemlist pitemlistNode1;
        {
            // Block
        PItemlist pitemlistNode2;
        PItem pitemNode3;
        pitemlistNode2 = (PItemlist)nodeArrayList1.get(0);
        pitemNode3 = (PItem)nodeArrayList2.get(0);

        pitemlistNode1 = new AItemlistItemlist(pitemlistNode2, pitemNode3);
        }
	nodeList.add(pitemlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AItem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PItem pitemNode1;
        {
            // Block
        TDigit tdigitNode2;
        PTime ptimeNode3;
        PSubs psubsNode4;
        tdigitNode2 = (TDigit)nodeArrayList1.get(0);
        ptimeNode3 = (PTime)nodeArrayList2.get(0);
        psubsNode4 = (PSubs)nodeArrayList3.get(0);

        pitemNode1 = new AItem(tdigitNode2, ptimeNode3, psubsNode4);
        }
	nodeList.add(pitemNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ATime */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTime ptimeNode1;
        {
            // Block
        PTstart ptstartNode2;
        TArrow tarrowNode3;
        PTend ptendNode4;
        ptstartNode2 = (PTstart)nodeArrayList1.get(0);
        tarrowNode3 = (TArrow)nodeArrayList2.get(0);
        ptendNode4 = (PTend)nodeArrayList3.get(0);

        ptimeNode1 = new ATime(ptstartNode2, tarrowNode3, ptendNode4);
        }
	nodeList.add(ptimeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ATstart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTstart ptstartNode1;
        {
            // Block
        PHours phoursNode2;
        TTwopoint ttwopointNode3;
        PMinutes pminutesNode4;
        TTwopoint ttwopointNode5;
        PSeconds psecondsNode6;
        TComma tcommaNode7;
        PMillisecons pmilliseconsNode8;
        phoursNode2 = (PHours)nodeArrayList1.get(0);
        ttwopointNode3 = (TTwopoint)nodeArrayList2.get(0);
        pminutesNode4 = (PMinutes)nodeArrayList3.get(0);
        ttwopointNode5 = (TTwopoint)nodeArrayList4.get(0);
        psecondsNode6 = (PSeconds)nodeArrayList5.get(0);
        tcommaNode7 = (TComma)nodeArrayList6.get(0);
        pmilliseconsNode8 = (PMillisecons)nodeArrayList7.get(0);

        ptstartNode1 = new ATstart(phoursNode2, ttwopointNode3, pminutesNode4, ttwopointNode5, psecondsNode6, tcommaNode7, pmilliseconsNode8);
        }
	nodeList.add(ptstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ATend */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTend ptendNode1;
        {
            // Block
        PHours phoursNode2;
        TTwopoint ttwopointNode3;
        PMinutes pminutesNode4;
        TTwopoint ttwopointNode5;
        PSeconds psecondsNode6;
        TComma tcommaNode7;
        PMillisecons pmilliseconsNode8;
        phoursNode2 = (PHours)nodeArrayList1.get(0);
        ttwopointNode3 = (TTwopoint)nodeArrayList2.get(0);
        pminutesNode4 = (PMinutes)nodeArrayList3.get(0);
        ttwopointNode5 = (TTwopoint)nodeArrayList4.get(0);
        psecondsNode6 = (PSeconds)nodeArrayList5.get(0);
        tcommaNode7 = (TComma)nodeArrayList6.get(0);
        pmilliseconsNode8 = (PMillisecons)nodeArrayList7.get(0);

        ptendNode1 = new ATend(phoursNode2, ttwopointNode3, pminutesNode4, ttwopointNode5, psecondsNode6, tcommaNode7, pmilliseconsNode8);
        }
	nodeList.add(ptendNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ATextSubs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSubs psubsNode1;
        {
            // Block
        PWriting pwritingNode2;
        pwritingNode2 = (PWriting)nodeArrayList1.get(0);

        psubsNode1 = new ATextSubs(pwritingNode2);
        }
	nodeList.add(psubsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ASubsSubs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSubs psubsNode1;
        {
            // Block
        PWriting pwritingNode2;
        PSubs psubsNode3;
        pwritingNode2 = (PWriting)nodeArrayList1.get(0);
        psubsNode3 = (PSubs)nodeArrayList2.get(0);

        psubsNode1 = new ASubsSubs(pwritingNode2, psubsNode3);
        }
	nodeList.add(psubsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AFontWriting */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWriting pwritingNode1;
        {
            // Block
        TFont tfontNode2;
        TText ttextNode3;
        TFont tfontNode4;
        tfontNode2 = (TFont)nodeArrayList1.get(0);
        ttextNode3 = (TText)nodeArrayList2.get(0);
        tfontNode4 = (TFont)nodeArrayList3.get(0);

        pwritingNode1 = new AFontWriting(tfontNode2, ttextNode3, tfontNode4);
        }
	nodeList.add(pwritingNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ATextWriting */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWriting pwritingNode1;
        {
            // Block
        TText ttextNode2;
        ttextNode2 = (TText)nodeArrayList1.get(0);

        pwritingNode1 = new ATextWriting(ttextNode2);
        }
	nodeList.add(pwritingNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AColorWriting */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWriting pwritingNode1;
        {
            // Block
        TOpen topenNode2;
        TColor tcolorNode3;
        TEnd tendNode4;
        TText ttextNode5;
        TClose tcloseNode6;
        topenNode2 = (TOpen)nodeArrayList1.get(0);
        tcolorNode3 = (TColor)nodeArrayList2.get(0);
        tendNode4 = (TEnd)nodeArrayList3.get(0);
        ttextNode5 = (TText)nodeArrayList4.get(0);
        tcloseNode6 = (TClose)nodeArrayList5.get(0);

        pwritingNode1 = new AColorWriting(topenNode2, tcolorNode3, tendNode4, ttextNode5, tcloseNode6);
        }
	nodeList.add(pwritingNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AHours */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHours phoursNode1;
        {
            // Block
        TDigit tdigitNode2;
        tdigitNode2 = (TDigit)nodeArrayList1.get(0);

        phoursNode1 = new AHours(tdigitNode2);
        }
	nodeList.add(phoursNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AMinutes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMinutes pminutesNode1;
        {
            // Block
        TDigit tdigitNode2;
        tdigitNode2 = (TDigit)nodeArrayList1.get(0);

        pminutesNode1 = new AMinutes(tdigitNode2);
        }
	nodeList.add(pminutesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ASeconds */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSeconds psecondsNode1;
        {
            // Block
        TDigit tdigitNode2;
        tdigitNode2 = (TDigit)nodeArrayList1.get(0);

        psecondsNode1 = new ASeconds(tdigitNode2);
        }
	nodeList.add(psecondsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AMillisecons */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMillisecons pmilliseconsNode1;
        {
            // Block
        TDigit tdigitNode2;
        tdigitNode2 = (TDigit)nodeArrayList1.get(0);

        pmilliseconsNode1 = new AMillisecons(tdigitNode2);
        }
	nodeList.add(pmilliseconsNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {0, SHIFT, 5}, },
			{{-1, ERROR, 2}, {10, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 6}, {5, SHIFT, 10}, {6, SHIFT, 11}, {9, SHIFT, 12}, },
			{{-1, ERROR, 7}, {1, SHIFT, 15}, },
			{{-1, ERROR, 8}, {3, SHIFT, 16}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 11}, {4, SHIFT, 17}, },
			{{-1, ERROR, 12}, {5, SHIFT, 18}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 7}, {5, SHIFT, 10}, {6, SHIFT, 11}, {9, SHIFT, 12}, },
			{{-1, ERROR, 15}, {0, SHIFT, 5}, },
			{{-1, ERROR, 16}, {0, SHIFT, 22}, },
			{{-1, ERROR, 17}, {8, SHIFT, 24}, },
			{{-1, ERROR, 18}, {9, SHIFT, 25}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 21}, {3, SHIFT, 26}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 23}, {3, SHIFT, 27}, },
			{{-1, ERROR, 24}, {5, SHIFT, 28}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 26}, {0, SHIFT, 22}, },
			{{-1, ERROR, 27}, {0, SHIFT, 30}, },
			{{-1, ERROR, 28}, {7, SHIFT, 32}, },
			{{-1, ERROR, 29}, {3, SHIFT, 33}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 31}, {2, SHIFT, 34}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 33}, {0, SHIFT, 30}, },
			{{-1, ERROR, 34}, {0, SHIFT, 36}, },
			{{-1, ERROR, 35}, {2, SHIFT, 38}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 38}, {0, SHIFT, 36}, },
			{{-1, REDUCE, 6}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 4}, {3, 9}, },
			{{-1, 6}, },
			{{-1, 7}, },
			{{-1, 20}, },
			{{-1, 13}, {14, 19}, },
			{{-1, 14}, },
			{{-1, 8}, {15, 21}, },
			{{-1, 23}, {26, 29}, },
			{{-1, 31}, {33, 35}, },
			{{-1, 37}, {38, 39}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: digit",
			"expecting: EOF",
			"expecting: digit, EOF",
			"expecting: ':'",
			"expecting: text, '<font color="#', font",
			"expecting: arrow",
			"expecting: digit, text, '<font color="#', font, EOF",
			"expecting: color",
			"expecting: text",
			"expecting: '">'",
			"expecting: font",
			"expecting: '</font>'",
			"expecting: ','",
			"expecting: arrow, text, '<font color="#', font",
        };*/
    private static int[] errors;
/*      {
			0, 0, 1, 2, 2, 3, 4, 5, 3, 2, 6, 7, 8, 2, 6, 0, 0, 9, 10, 2, 4, 3, 3, 3, 8, 6, 0, 0, 11, 3, 12, 12, 6, 0, 0, 12, 13, 5, 0, 4, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
