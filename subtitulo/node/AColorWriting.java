/* This file was generated by SableCC (http://www.sablecc.org/). */

package subtitulo.node;

import subtitulo.analysis.*;

@SuppressWarnings("nls")
public final class AColorWriting extends PWriting
{
    private TOpen _open_;
    private TColor _color_;
    private TEnd _end_;
    private TText _text_;
    private TClose _close_;

    public AColorWriting()
    {
        // Constructor
    }

    public AColorWriting(
        @SuppressWarnings("hiding") TOpen _open_,
        @SuppressWarnings("hiding") TColor _color_,
        @SuppressWarnings("hiding") TEnd _end_,
        @SuppressWarnings("hiding") TText _text_,
        @SuppressWarnings("hiding") TClose _close_)
    {
        // Constructor
        setOpen(_open_);

        setColor(_color_);

        setEnd(_end_);

        setText(_text_);

        setClose(_close_);

    }

    @Override
    public Object clone()
    {
        return new AColorWriting(
            cloneNode(this._open_),
            cloneNode(this._color_),
            cloneNode(this._end_),
            cloneNode(this._text_),
            cloneNode(this._close_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAColorWriting(this);
    }

    public TOpen getOpen()
    {
        return this._open_;
    }

    public void setOpen(TOpen node)
    {
        if(this._open_ != null)
        {
            this._open_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._open_ = node;
    }

    public TColor getColor()
    {
        return this._color_;
    }

    public void setColor(TColor node)
    {
        if(this._color_ != null)
        {
            this._color_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._color_ = node;
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    public TText getText()
    {
        return this._text_;
    }

    public void setText(TText node)
    {
        if(this._text_ != null)
        {
            this._text_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._text_ = node;
    }

    public TClose getClose()
    {
        return this._close_;
    }

    public void setClose(TClose node)
    {
        if(this._close_ != null)
        {
            this._close_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._close_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._open_)
            + toString(this._color_)
            + toString(this._end_)
            + toString(this._text_)
            + toString(this._close_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._open_ == child)
        {
            this._open_ = null;
            return;
        }

        if(this._color_ == child)
        {
            this._color_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        if(this._text_ == child)
        {
            this._text_ = null;
            return;
        }

        if(this._close_ == child)
        {
            this._close_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._open_ == oldChild)
        {
            setOpen((TOpen) newChild);
            return;
        }

        if(this._color_ == oldChild)
        {
            setColor((TColor) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        if(this._text_ == oldChild)
        {
            setText((TText) newChild);
            return;
        }

        if(this._close_ == oldChild)
        {
            setClose((TClose) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
