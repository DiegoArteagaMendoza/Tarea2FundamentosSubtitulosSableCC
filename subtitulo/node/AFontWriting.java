/* This file was generated by SableCC (http://www.sablecc.org/). */

package subtitulo.node;

import subtitulo.analysis.*;

@SuppressWarnings("nls")
public final class AFontWriting extends PWriting
{
    private TFont _f1_;
    private TText _text_;
    private TFont _f2_;

    public AFontWriting()
    {
        // Constructor
    }

    public AFontWriting(
        @SuppressWarnings("hiding") TFont _f1_,
        @SuppressWarnings("hiding") TText _text_,
        @SuppressWarnings("hiding") TFont _f2_)
    {
        // Constructor
        setF1(_f1_);

        setText(_text_);

        setF2(_f2_);

    }

    @Override
    public Object clone()
    {
        return new AFontWriting(
            cloneNode(this._f1_),
            cloneNode(this._text_),
            cloneNode(this._f2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFontWriting(this);
    }

    public TFont getF1()
    {
        return this._f1_;
    }

    public void setF1(TFont node)
    {
        if(this._f1_ != null)
        {
            this._f1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._f1_ = node;
    }

    public TText getText()
    {
        return this._text_;
    }

    public void setText(TText node)
    {
        if(this._text_ != null)
        {
            this._text_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._text_ = node;
    }

    public TFont getF2()
    {
        return this._f2_;
    }

    public void setF2(TFont node)
    {
        if(this._f2_ != null)
        {
            this._f2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._f2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._f1_)
            + toString(this._text_)
            + toString(this._f2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._f1_ == child)
        {
            this._f1_ = null;
            return;
        }

        if(this._text_ == child)
        {
            this._text_ = null;
            return;
        }

        if(this._f2_ == child)
        {
            this._f2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._f1_ == oldChild)
        {
            setF1((TFont) newChild);
            return;
        }

        if(this._text_ == oldChild)
        {
            setText((TText) newChild);
            return;
        }

        if(this._f2_ == oldChild)
        {
            setF2((TFont) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
